--- a/services/requestService.js
+++ b/services/requestService.js
@@ -1,30 +1,63 @@
 // services/requestService.js
 const db = require('../db');
 const utils = require('../utils');
 const authService = require('./authService');
 const stateManager = require('../stateManager');
+const { ANTECEDENCIA_MINIMA_MINUTOS } = require('../config');
 
-async function solicitarData(bot, chatId, userId) {
-    const sessao = await stateManager.getSession(userId) || {};
-    sessao.etapa = 'aguardando_data';
-    sessao.chatId = chatId;
-    await stateManager.setSession(userId, sessao);
+// --- FUN√á√ÉO CENTRAL PARA CONSTRUIR A MENSAGEM INTERATIVA ---
 
-    const keyboard = {
-        inline_keyboard: [
-            [{ text: 'üìÖ HOJE', callback_data: `data_hoje_${userId}` }]
-        ]
-    };
-    bot.sendMessage(chatId, `
-üìÖ *INFORMAR DATA*
+/**
+ * Constr√≥i o texto e o teclado para a mensagem interativa de solicita√ß√£o.
+ * @param {object} sessao - O objeto de sess√£o atual do usu√°rio.
+ * @returns {object} - Retorna o texto e o reply_markup para a mensagem.
+ */
+function buildInteractiveMessage(sessao) {
+    let text = 'üìã *SOLICITA√á√ÉO DE VIATURA*\n\n';
+    text += 'Preencha os dados abaixo:\n\n';
 
-Por favor, informe a data que voc√™ precisar√° da viatura.
-‚è∞ *IMPORTANTE: Solicita√ß√£o deve ser feita com pelo menos ${require('../config').ANTECEDENCIA_MINIMA_MINUTOS} minutos de anteced√™ncia!*
+    // Etapa da Data
+    text += `üìÖ *Data da Necessidade:*\n`;
+    if (sessao.data) {
+        text += `   ‚Ü≥ *Salvo:* ${sessao.data} ‚úÖ\n\n`;
+    } else {
+        text += `   ‚Ü≥ _Aguardando sua resposta..._\n\n`;
+    }
 
-*Formato:* DD/MM/AAAA
-*Exemplo:* 15/06/2025
+    // Etapa da Hora
+    if (sessao.etapa === 'aguardando_hora' || sessao.hora) {
+        text += `üïê *Hora da Necessidade:*\n`;
+        if (sessao.hora) {
+            text += `   ‚Ü≥ *Salvo:* ${sessao.hora} ‚úÖ\n\n`;
+        } else {
+            text += `   ‚Ü≥ _Aguardando sua resposta..._\n\n`;
+        }
+    }
 
-Digite a data desejada ou clique em "HOJE":
-    `, { parse_mode: 'Markdown', reply_markup: keyboard });
+    // Etapa do Motivo
+    if (sessao.etapa === 'aguardando_motivo' || sessao.motivo) {
+        text += `üìù *Motivo:*\n`;
+        if (sessao.motivo) {
+            text += `   ‚Ü≥ *Salvo:* ${sessao.motivo} ‚úÖ\n\n`;
+        } else {
+            text += `   ‚Ü≥ _Aguardando sua resposta..._\n\n`;
+        }
+    }
+    
+    if (sessao.errorMessage) {
+        text += `\n‚ö†Ô∏è *ERRO:* ${sessao.errorMessage}\nPor favor, tente novamente:`;
+    }
+
+    const keyboard = { inline_keyboard: [] };
+    if (sessao.etapa === 'aguardando_data') {
+        keyboard.inline_keyboard.push([{ text: 'üìÖ HOJE', callback_data: `data_hoje_${sessao.userId}` }]);
+    }
+
+    return { text, reply_markup: keyboard };
 }
 
-async function solicitarHora(bot, chatId, userId) {
-    const sessao = await stateManager.getSession(userId);
-    if (!sessao || !sessao.data) {
-        bot.sendMessage(chatId, "‚ùå Erro: Data n√£o definida. Por favor, comece a solicita√ß√£o novamente com /solicitarviatura.");
-        await stateManager.deleteSession(userId);
-        return;
-    }
-    sessao.etapa = 'aguardando_hora';
+
+// --- FUN√á√ïES DO FLUXO INTERATIVO ---
+
+async function iniciarFluxoSolicitacao(bot, userId, messageId) {
+    const sessao = await stateManager.getSession(userId) || {};
+    sessao.etapa = 'aguardando_data';
+    sessao.interactiveMessageId = messageId;
+    sessao.userId = userId;
+
+    const { text, reply_markup } = buildInteractiveMessage(sessao);
+
+    await bot.editMessageText(text, {
+        chat_id: sessao.chatId,
+        message_id: messageId,
+        parse_mode: 'Markdown',
+        reply_markup: reply_markup
+    });
+
     await stateManager.setSession(userId, sessao);
-
-    bot.sendMessage(chatId, `
-üïê *INFORMAR HORA*
-
-Data selecionada: ${sessao.data}
-Digite a hora que voc√™ precisar√° da viatura:
-
-*Ex.: 16h00, 10:30, 0930*
-
-Digite a hora desejada:
-    `, { parse_mode: 'Markdown' });
-}
-
-async function solicitarMotivo(bot, chatId, userId) {
-    const sessao = await stateManager.getSession(userId);
-    if (!sessao || !sessao.data || !sessao.hora) {
-        bot.sendMessage(chatId, "‚ùå Erro: Data ou Hora n√£o definida. Por favor, comece a solicita√ß√£o novamente com /solicitarviatura.");
-        await stateManager.deleteSession(userId);
-        return;
-    }
-    sessao.etapa = 'aguardando_motivo';
-    await stateManager.setSession(userId, sessao);
-
-    bot.sendMessage(chatId, `
-üìù *INFORMAR MOTIVO*
-
-Data: ${sessao.data}
-Hora: ${sessao.hora}
-Por favor, descreva o motivo pelo qual voc√™ precisa da viatura:
-
-*Exemplos:*
-- Patrulhamento preventivo
-- Atendimento de ocorr√™ncia
-- Deslocamento administrativo
-- Curso/treinamento
-
-Digite o motivo:
-    `, { parse_mode: 'Markdown' });
 }
 
-async function processarEntradaDataSolicitacao(bot, userId, texto) {
+async function processarEntradaDataSolicitacao(bot, msg) {
+    const userId = msg.from.id;
+    const texto = msg.text;
     const sessao = await stateManager.getSession(userId);
+    bot.deleteMessage(msg.chat.id, msg.message_id).catch(e => console.error("Erro ao deletar mensagem do usu√°rio:", e.message));
+
     if (!sessao || sessao.etapa !== 'aguardando_data') return false;
 
     const regexData = /^(\d{2})\/(\d{2})\/(\d{4})$/;
@@ -95,83 +128,81 @@
-async function processarEntradaHoraSolicitacao(bot, userId, texto) {
+async function processarEntradaHoraSolicitacao(bot, msg) {
+    const userId = msg.from.id;
+    const texto = msg.text;
     const sessao = await stateManager.getSession(userId);
+    bot.deleteMessage(msg.chat.id, msg.message_id).catch(e => console.error("Erro ao deletar mensagem do usu√°rio:", e.message));
+
     if (!sessao || sessao.etapa !== 'aguardando_hora') return false;
 
-    function processarHora(input) {
-        const textoLimpo = input.trim();
-        
-        const regexHoraMinuto = /^(\d{1,2}):(\d{2})$/;
-        let match = textoLimpo.match(regexHoraMinuto);
-        if (match) {
-            const hora = parseInt(match[1]);
-            const minuto = parseInt(match[2]);
-            return { hora, minuto, formato: 'HH:MM' };
+    const processarHora = (input) => {
+        const textoLimpo = input.replace(/\s/g, '').toLowerCase();
+        let match = textoLimpo.match(/^(\d{1,2})[:h](\d{2})$/);
+        if (!match) match = textoLimpo.match(/^(\d{2})(\d{2})$/);
+        if (!match) return null;
+
+        const hora = parseInt(match[1]);
+        const minuto = parseInt(match[2]);
+
+        if (hora >= 0 && hora <= 23 && minuto >= 0 && minuto <= 59) {
+            return `${String(hora).padStart(2, '0')}:${String(minuto).padStart(2, '0')}`;
         }
-        
-        const regexHora = /^(\d{1,2})h(\d{2})$/i;
-        match = textoLimpo.match(regexHora);
-        if (match) {
-            const hora = parseInt(match[1]);
-            const minuto = parseInt(match[2]);
-            return { hora, minuto, formato: 'HHhMM' };
-        }
-        
-        const regexInteiro = /^(\d{3,4})$/;
-        match = textoLimpo.match(regexInteiro);
-        if (match) {
-            const numero = match[1];
-            let hora, minuto;
-            
-            if (numero.length === 3) {
-                hora = parseInt(numero.substring(0, 1));
-                minuto = parseInt(numero.substring(1, 3));
-            } else {
-                hora = parseInt(numero.substring(0, 2));
-                minuto = parseInt(numero.substring(2, 4));
-            }
-            return { hora, minuto, formato: 'HHMM' };
-        }
-        
         return null;
-    }
-
-    const resultado = processarHora(texto);
+    };
-    
-    if (!resultado) {
-        bot.sendMessage(sessao.chatId, `‚ùå *FORMATO INV√ÅLIDO*
+    const horaFormatada = processarHora(texto);
 
-Formatos aceitos:
-- **10:00** (hora:minuto)
-- **10h00** (hora h minuto)
-- **1000** (n√∫mero de 4 d√≠gitos)
-
-Digite novamente:`, { parse_mode: 'Markdown' });
-        return true;
-    }
-
-    const { hora, minuto } = resultado;
-    
-    if (hora > 23 || minuto > 59) {
-        bot.sendMessage(sessao.chatId, `‚ùå *HORA INV√ÅLIDA*
-
-Hora deve ser entre 00:00 e 23:59
-**Voc√™ digitou:** ${hora}:${String(minuto).padStart(2, '0')}
-
-Digite novamente:`, { parse_mode: 'Markdown' });
-        return true;
+    if (!horaFormatada) {
+        sessao.errorMessage = 'Formato de hora inv√°lido. Use HH:MM, HHhMM ou HHMM.';
+    } else {
+        sessao.hora = horaFormatada;
+        sessao.etapa = 'aguardando_motivo';
+        delete sessao.errorMessage;
     }
 
-    const horaFormatada = `${String(hora).padStart(2, '0')}:${String(minuto).padStart(2, '0')}`;
-    
-    sessao.hora = horaFormatada;
+    const { text, reply_markup } = buildInteractiveMessage(sessao);
+    await bot.editMessageText(text, {
+        chat_id: sessao.chatId,
+        message_id: sessao.interactiveMessageId,
+        parse_mode: 'Markdown',
+        reply_markup
+    });
+    
     await stateManager.setSession(userId, sessao);
-    bot.sendMessage(sessao.chatId, `‚úÖ *Hora salva:* ${horaFormatada}`, { parse_mode: 'Markdown' });
-    solicitarMotivo(bot, sessao.chatId, userId);
     return true;
 }
 
-async function processarEntradaMotivoSolicitacao(bot, userId, texto) {
+async function processarEntradaMotivoSolicitacao(bot, msg) {
+    const userId = msg.from.id;
+    const texto = msg.text;
     const sessao = await stateManager.getSession(userId);
+    bot.deleteMessage(msg.chat.id, msg.message_id).catch(e => console.error("Erro ao deletar mensagem do usu√°rio:", e.message));
+
     if (!sessao || sessao.etapa !== 'aguardando_motivo') return false;
 
     if (!texto || texto.trim().length < 5) {
-        bot.sendMessage(sessao.chatId, `‚ùå *MOTIVO MUITO CURTO*\nPor favor, descreva com mais detalhes o motivo da solicita√ß√£o.\nM√≠nimo de 5 caracteres.\n\nDigite novamente:`, { parse_mode: 'Markdown' });
-        return true;
+        sessao.errorMessage = 'Motivo muito curto. Descreva com mais detalhes (m√≠nimo 5 caracteres).';
+        const { text, reply_markup } = buildInteractiveMessage(sessao);
+        await bot.editMessageText(text, {
+            chat_id: sessao.chatId,
+            message_id: sessao.interactiveMessageId,
+            parse_mode: 'Markdown',
+            reply_markup
+        });
+    } else {
+        sessao.motivo = texto.trim();
+        sessao.etapa = 'dados_completos';
+        delete sessao.errorMessage;
+        
+        const { text } = buildInteractiveMessage(sessao);
+        await bot.editMessageText(text, {
+            chat_id: sessao.chatId,
+            message_id: sessao.interactiveMessageId,
+            parse_mode: 'Markdown'
+        });
+        await processarSolicitacaoFinal(bot, userId);
     }
-    sessao.motivo = texto.trim();
+    
     await stateManager.setSession(userId, sessao);
-    bot.sendMessage(sessao.chatId, `‚úÖ *Motivo salvo:* ${texto.trim()}`, { parse_mode: 'Markdown' });
-    await processarSolicitacaoFinal(bot, userId);
     return true;
 }
 
@@ -183,18 +214,24 @@
     }
 
     const idSolicitacao = stateManager.generateRequestId();
-    const dataInput = sessao.data;
-    const horaInput = sessao.hora;
+    const dataHoraNecessidadeDisplay = `${sessao.data} ${sessao.hora}`;
 
-    const [dia, mes, ano] = dataInput.split('/');
-    const [hora, minuto] = horaInput.split(':');
-    const dataHoraNecessidadeMySQL = `${ano}-${mes}-${dia} ${hora}:${minuto}:00`;
-    const dataHoraNecessidadeDisplay = `${dataInput} ${horaInput}`;
-
     if (!utils.validarAntecedencia(dataHoraNecessidadeDisplay)) {
-        const necessidadeDate = new Date(parseInt(ano), parseInt(mes) - 1, parseInt(dia), parseInt(hora), parseInt(minuto));
-        const agora = new Date();
-        const diferencaMinutos = Math.round((necessidadeDate - agora) / (1000 * 60));
-        const antecedenciaMinima = require('../config').ANTECEDENCIA_MINIMA_MINUTOS;
+        sessao.etapa = 'aguardando_hora';
+        delete sessao.hora;
+        sessao.errorMessage = `Anteced√™ncia insuficiente. M√≠nimo de ${ANTECEDENCIA_MINIMA_MINUTOS} minutos.`;
+        await stateManager.setSession(userId, sessao);
+        const { text, reply_markup } = buildInteractiveMessage(sessao);
+        await bot.editMessageText(text, {
+            chat_id: sessao.chatId,
+            message_id: sessao.interactiveMessageId,
+            parse_mode: 'Markdown',
+            reply_markup
+        });
+        return;
+    }
-        bot.sendMessage(sessao.chatId, `
-‚ùå *ANTECED√äNCIA INSUFICIENTE*
-
-Solicita√ß√µes devem ser feitas com pelo menos ${antecedenciaMinima} minutos de anteced√™ncia.
-- Data/Hora atual: ${utils.formatarDataHora()}
-- Data/Hora solicitada: ${dataHoraNecessidadeDisplay}
-- Diferen√ßa: ${diferencaMinutos} minutos
-
-${diferencaMinutos < 0 ? '‚ö†Ô∏è A data/hora solicitada j√° passou!' : `‚ö†Ô∏è Faltam ${antecedenciaMinima - diferencaMinutos} minutos para atingir a anteced√™ncia m√≠nima.`}
-
-Por favor, escolha um hor√°rio com mais anteced√™ncia.
-        `, { parse_mode: 'Markdown' });
-        sessao.etapa = 'aguardando_hora';
-        delete sessao.hora;
-        await stateManager.setSession(userId, sessao);
-        return;
-    }
-
+    
+    const [dia, mes, ano] = sessao.data.split('/');
+    const [hora, minuto] = sessao.hora.split(':');
+    const dataHoraNecessidadeMySQL = `${ano}-${mes}-${dia} ${hora}:${minuto}:00`;
     const solicitacao = {
         codigo: idSolicitacao,
         solicitante: { id: userId, nome: sessao.nomeUsuario, chatId: sessao.chatId },
@@ -203,24 +240,23 @@
-        dataHoraNecessidadeDisplay: dataHoraNecessidadeDisplay,
         motivo: sessao.motivo,
         status: 'aguardando_vistoria',
-        messageIds: {}
+        messageIds: {
+            interactive: sessao.interactiveMessageId
+        }
     };
 
     try {
         await db.salvarSolicitacaoDB(solicitacao);
         stateManager.setRequest(idSolicitacao, solicitacao);
 
-        const msgSolicitante = await bot.sendMessage(sessao.chatId, `
-üü° *SOLICITA√á√ÉO ENVIADA - ${idSolicitacao}*
-
-üìã *Dados da solicita√ß√£o:*
-- Solicitante: ${sessao.nomeUsuario}
-- Data/Hora necessidade: ${dataHoraNecessidadeDisplay}
-- Motivo: ${sessao.motivo}
-
-‚è≥ *Status: Aguardando vistoriador...*
-Voc√™ ser√° notificado sobre o andamento.
-        `, { parse_mode: 'Markdown' });
-        solicitacao.messageIds.solicitante = msgSolicitante.message_id;
+        const msgStatus = await bot.sendMessage(sessao.chatId, `üü° *SOLICITA√á√ÉO ENVIADA - ${idSolicitacao}*\n\n*Status:* Aguardando vistoriador...`, { parse_mode: 'Markdown' });
+        solicitacao.messageIds.status = msgStatus.message_id;
         stateManager.setRequest(idSolicitacao, solicitacao);
-
         await notificarVistoriadores(bot, idSolicitacao);
     } catch (error) {
         console.error('Erro ao processar solicita√ß√£o final:', error);
-        bot.sendMessage(sessao.chatId, '‚ùå Erro ao salvar ou notificar sobre a solicita√ß√£o. Tente novamente.');
-    } finally {
-        await stateManager.deleteSession(userId);
+        bot.sendMessage(sessao.chatId, '‚ùå Erro ao salvar a solicita√ß√£o.');
     }
 }
 
@@ -279,18 +315,13 @@
     }
 
-    try {
-        await bot.editMessageText(`
-üü† *SOLICITA√á√ÉO EM AN√ÅLISE - ${codigoSolicitacao}*
-
-üìã *Dados da solicita√ß√£o:*
-- Solicitante: ${solicitacao.solicitante.nome}
-- Data/Hora necessidade: ${solicitacao.dataHoraNecessidadeDisplay || solicitacao.dataHoraNecessidade}
-- Motivo: ${solicitacao.motivo}
-
-üîç *Status: Em an√°lise - Vistoriador: ${solicitacao.vistoriador.nome}*
-        `, { chat_id: solicitacao.solicitante.chatId, message_id: solicitacao.messageIds.solicitante, parse_mode: 'Markdown' });
-    } catch (error) {
-        console.error('Erro ao atualizar mensagem do solicitante (em vistoria):', error);
-    }
+    await bot.editMessageText(`üü† *SOLICITA√á√ÉO EM AN√ÅLISE - ${codigoSolicitacao}*\n\n*Status:* Em an√°lise pelo vistoriador ${solicitacao.vistoriador.nome}`, {
+        chat_id: solicitacao.solicitante.chatId,
+        message_id: solicitacao.messageIds.status,
+        parse_mode: 'Markdown'
+    }).catch(e => console.error("Erro ao editar msg do solicitante (vistoria):", e.message));
+
     return null;
 }
 
@@ -351,13 +382,10 @@
             parse_mode: 'Markdown'
         });
 
-        await bot.editMessageText(`üîµ *SOLICITA√á√ÉO AGUARDANDO AUTORIZA√á√ÉO - ${codigoSolicitacao}*\n\nüìã *Dados da solicita√ß√£o:*\n‚Ä¢ Solicitante: ${solicitacao.solicitante.nome}\n‚Ä¢ Data/Hora necessidade: ${solicitacao.dataHoraNecessidadeDisplay || solicitacao.dataHoraNecessidade}\n‚Ä¢ Motivo: ${solicitacao.motivo}\n‚Ä¢ Vistoriador: ${solicitacao.vistoriador.nome}\n‚Ä¢ Viatura: ${viaturaSelecionada.prefixo} - ${viaturaSelecionada.nome}\n\nüîµ *Status: Aguardando autoriza√ß√£o...*`, {
+        await bot.editMessageText(`üîµ *AGUARDANDO AUTORIZA√á√ÉO - ${codigoSolicitacao}*\n\n*Status:* Viatura ${solicitacao.viatura.prefixo} selecionada. Aguardando autoriza√ß√£o.`, {
             chat_id: solicitacao.solicitante.chatId,
-            message_id: solicitacao.messageIds.solicitante,
+            message_id: solicitacao.messageIds.status,
             parse_mode: 'Markdown'
-        });
+        }).catch(e => console.error("Erro ao editar msg do solicitante (viatura selecionada):", e.message));
 
         await notificarAutorizadores(bot, codigoSolicitacao);
         bot.answerCallbackQuery(callbackQuery.id, { text: '‚úÖ Viatura selecionada!' });
@@ -410,24 +438,20 @@
 
     if (autorizado) {
         solicitacao.status = 'autorizada';
+        let statusText;
         await db.atualizarStatusSolicitacaoDB(codigoSolicitacao, 'autorizada', dbData);
 
-        const msgText = `
-‚úÖ *SOLICITA√á√ÉO AUTORIZADA - ${codigoSolicitacao}*
-Autorizada por: ${autorizadorInfo.nome}
-üìã *Resumo da solicita√ß√£o:*
-- Solicitante: ${solicitacao.solicitante.nome}
-- Data/Hora necessidade: ${solicitacao.dataHoraNecessidadeDisplay || solicitacao.dataHoraNecessidade}
-- Viatura: ${solicitacao.viatura.prefixo} - ${solicitacao.viatura.nome}`;
+        statusText = `‚úÖ *SOLICITA√á√ÉO AUTORIZADA - ${codigoSolicitacao}*\n\n*Status:* AUTORIZADA! Aguardando entrega das chaves...`;
 
         if (solicitacao.messageIds.autorizadores) {
             for (const msg of solicitacao.messageIds.autorizadores) {
                 try {
-                    await bot.editMessageText(msgText, { chat_id: msg.chatId, message_id: msg.messageId, parse_mode: 'Markdown' });
+                    await bot.editMessageText(`‚úÖ *SOLICITA√á√ÉO AUTORIZADA - ${codigoSolicitacao}*\nAutorizada por: ${autorizadorInfo.nome}`, { chat_id: msg.chatId, message_id: msg.messageId, parse_mode: 'Markdown' });
                 } catch (e) {
                     console.error("Erro edit msg autorizador (auth):", e.message);
                 }
             }
         }
-        try {
-            await bot.editMessageText(`
-‚úÖ *SOLICITA√á√ÉO AUTORIZADA - ${codigoSolicitacao}*
-üìã *Dados da solicita√ß√£o:*
-- Solicitante: ${solicitacao.solicitante.nome}
-- Data/Hora necessidade: ${solicitacao.dataHoraNecessidadeDisplay || solicitacao.dataHoraNecessidade}
-- Viatura: ${solicitacao.viatura.prefixo} - ${solicitacao.viatura.nome}
-- Autorizador: ${autorizadorInfo.nome}
-üéâ *Status: AUTORIZADA! Aguardando entrega das chaves...*
-       `, { chat_id: solicitacao.solicitante.chatId, message_id: solicitacao.messageIds.solicitante, parse_mode: 'Markdown' });
-       } catch(e) {
-           console.error("Erro edit msg solicitante (auth):", e.message);
-       }
 
        await notificarRadioOperadores(bot, codigoSolicitacao);
 
@@ -435,35 +459,27 @@
        solicitacao.status = 'negada';
        await db.atualizarStatusSolicitacaoDB(codigoSolicitacao, 'negada', dbData);
        if(solicitacao.viatura && solicitacao.viatura.id) {
-           try {
-               await db.updateViaturaStatusDB(solicitacao.viatura.id, 'disponivel');
-           } catch(e) {
-               console.error("Erro ao liberar viatura (negada):", e.message);
-           }
+           await db.updateViaturaStatusDB(solicitacao.viatura.id, 'disponivel');
        }
 
-       const msgTextNegada = `
-‚ùå *SOLICITA√á√ÉO N√ÉO AUTORIZADA - ${codigoSolicitacao}*
-Negada por: ${autorizadorInfo.nome}
-üìã *Resumo da solicita√ß√£o:*
-- Solicitante: ${solicitacao.solicitante.nome}
-- Viatura: ${solicitacao.viatura.prefixo} - ${solicitacao.viatura.nome}`;
+       statusText = `‚ùå *N√ÉO AUTORIZADA - ${codigoSolicitacao}*\n\n*Status:* N√ÉO AUTORIZADA pelo(a) ${solicitacao.autorizador.nome}.`;
 
        if (solicitacao.messageIds.autorizadores) {
            for (const msg of solicitacao.messageIds.autorizadores) {
                try {
-                   await bot.editMessageText(msgTextNegada, { chat_id: msg.chatId, message_id: msg.message_id, parse_mode: 'Markdown' });
+                   await bot.editMessageText(`‚ùå *SOLICITA√á√ÉO N√ÉO AUTORIZADA - ${codigoSolicitacao}*\nNegada por: ${autorizadorInfo.nome}`, { chat_id: msg.chatId, message_id: msg.message_id, parse_mode: 'Markdown' });
                } catch (e) {
                    console.error("Erro edit msg autorizador (negada):", e.message);
                }
            }
        }
-       try {
-           await bot.editMessageText(`
-‚ùå *SOLICITA√á√ÉO N√ÉO AUTORIZADA - ${codigoSolicitacao}*
-üìã *Dados da solicita√ß√£o:*
-- Solicitante: ${solicitacao.solicitante.nome}
-- Viatura: ${solicitacao.viatura.prefixo} - ${solicitacao.viatura.nome}
-- Autorizador: ${autorizadorInfo.nome}
-‚ùå *Status: N√ÉO AUTORIZADA*
-Entre em contato com o autorizador para mais informa√ß√µes.
-       `, { chat_id: solicitacao.solicitante.chatId, message_id: solicitacao.messageIds.solicitante, parse_mode: 'Markdown' });
-       } catch(e) {
-           console.error("Erro edit msg solicitante (negada):", e.message);
-       }
    }
+    await bot.editMessageText(statusText, {
+        chat_id: solicitacao.solicitante.chatId,
+        message_id: solicitacao.messageIds.status,
+        parse_mode: 'Markdown'
+    }).catch(e => console.error("Erro ao editar msg do solicitante (autoriza√ß√£o):", e.message));
+
    stateManager.setRequest(codigoSolicitacao, solicitacao);
    return null;
 }
@@ -512,38 +528,27 @@
        radio_operador_nome: radioOpInfo.nome
    });
 
-   const msgText = `
-‚úÖ *CHAVES ENTREGUES - ${codigoSolicitacao}*
-Entregue por: ${radioOpInfo.nome}
-üìã *Resumo da solicita√ß√£o:*
-- Solicitante: ${solicitacao.solicitante.nome}
-- Viatura: ${solicitacao.viatura.prefixo} - ${solicitacao.viatura.nome}
-- R√°dio-operador: ${radioOpInfo.nome}
-‚úÖ *Status: CHAVES ENTREGUES*`;
-
    if (solicitacao.messageIds.radioOperadores) {
        for (const msg of solicitacao.messageIds.radioOperadores) {
             try {
-               await bot.editMessageText(msgText, { chat_id: msg.chatId, message_id: msg.messageId, parse_mode: 'Markdown' });
+               await bot.editMessageText(`‚úÖ *CHAVES ENTREGUES - ${codigoSolicitacao}*\nEntregue por: ${radioOpInfo.nome}`, { chat_id: msg.chatId, message_id: msg.messageId, parse_mode: 'Markdown' });
             } catch (e) {
                 console.error("Erro edit msg radioOp (entrega):", e.message);
             }
         }
    }
-   
+
    const keyboardKmInicial = {
        inline_keyboard: [[
            { text: 'üìä Informe o KM inicial', callback_data: `km_inicial_${codigoSolicitacao}_${solicitacao.solicitante.id}` }
        ]]
    };
 
-   try {
-       await bot.editMessageText(`
-üéâ *CHAVES ENTREGUES - ${codigoSolicitacao}*
-üìã *Dados da solicita√ß√£o:*
-- Solicitante: ${solicitacao.solicitante.nome}
-- Viatura: ${solicitacao.viatura.prefixo} - ${solicitacao.viatura.nome}
-- R√°dio-operador: ${radioOpInfo.nome}
-
-üîë *Status: CHAVES ENTREGUES!*
-üìä **Pr√≥ximo passo:** Informe a quilometragem inicial da viatura.
-       `, { 
-           chat_id: solicitacao.solicitante.chatId, 
-           message_id: solicitacao.messageIds.solicitante, 
-           parse_mode: 'Markdown',
-           reply_markup: keyboardKmInicial 
-       });
-   } catch(e) {
-       console.error("Erro edit msg solicitacao (entrega):", e.message);
-   }
+   await bot.editMessageText(`üîë *CHAVES ENTREGUES - ${codigoSolicitacao}*\n\n*Status:* Chaves em posse!\n*Pr√≥ximo passo:* Informe a quilometragem inicial.`, {
+       chat_id: solicitacao.solicitante.chatId,
+       message_id: solicitacao.messageIds.status,
+       parse_mode: 'Markdown',
+       reply_markup: keyboardKmInicial
+   }).catch(e => console.error("Erro ao editar msg do solicitante (entrega):", e.message));
 
    stateManager.setRequest(codigoSolicitacao, solicitacao);
    return null;
@@ -582,14 +587,17 @@
 Digite apenas n√∫meros:
    `, { parse_mode: 'Markdown' });
 }
 
-async function processarEntradaKmInicial(bot, userId, texto) {
+async function processarEntradaKmInicial(bot, msg) {
+   const userId = msg.from.id;
    const sessao = await stateManager.getSession(userId);
+   bot.deleteMessage(msg.chat.id, msg.message_id).catch(e => console.error("Erro ao deletar msg:", e.message));
+
    if (!sessao || sessao.etapa !== 'aguardando_km_inicial') return false;
 
-   const km = parseInt(texto.trim());
+   const km = parseInt(msg.text.trim());
    if (isNaN(km) || km < 0) {
        bot.sendMessage(sessao.chatId, `‚ùå *KM INV√ÅLIDO*\nDigite apenas n√∫meros (sem pontos ou v√≠rgulas).\nExemplo: 45000\n\nDigite novamente:`, { parse_mode: 'Markdown' });
        return true;
    }
@@ -628,52 +636,54 @@
        const keyboardKmFinal = {
            inline_keyboard: [[
                { text: 'üìä Informe o KM final', callback_data: `km_final_${sessao.codigoSolicitacao}_${userId}` }
            ]]
        };
 
-       await bot.editMessageText(`
-üìä *KM INICIAL REGISTRADO - ${sessao.codigoSolicitacao}*
-
-‚úÖ KM inicial: ${km.toLocaleString('pt-BR')}
-
-Quando voc√™ **devolver** a viatura, clique no bot√£o abaixo para informar o KM final:
-       `, { 
-           chat_id: sessao.chatId, 
-           message_id: solicitacao.messageIds.solicitante,
-           parse_mode: 'Markdown', 
-           reply_markup: keyboardKmFinal 
-       });
+       await bot.editMessageText(`üö® *VIATURA EM USO - ${sessao.codigoSolicitacao}*\n\n*Status:* Viatura em deslocamento.\n*KM Inicial:* ${km.toLocaleString('pt-BR')}\n\nQuando devolver, clique no bot√£o abaixo.`, {
+           chat_id: sessao.chatId,
+           message_id: solicitacao.messageIds.status,
+           parse_mode: 'Markdown',
+           reply_markup: keyboardKmFinal
+       });
 
        await stateManager.deleteSession(userId);
-       return true;
    } catch (error) {
        console.error('Erro ao salvar KM inicial:', error);
        bot.sendMessage(sessao.chatId, '‚ùå Erro ao salvar KM inicial. Tente novamente.');
-       return true;
    }
+   return true;
 }
 
-async function processarEntradaKmFinal(bot, userId, texto) {
+async function processarEntradaKmFinal(bot, msg) {
+   const userId = msg.from.id;
    const sessao = await stateManager.getSession(userId);
+   bot.deleteMessage(msg.chat.id, msg.message_id).catch(e => console.error("Erro ao deletar msg:", e.message));
+
    if (!sessao || sessao.etapa !== 'aguardando_km_final') return false;
 
-   const kmFinal = parseInt(texto.trim());
+   const kmFinal = parseInt(msg.text.trim());
    if (isNaN(kmFinal) || kmFinal < 0) {
        bot.sendMessage(sessao.chatId, `‚ùå *KM INV√ÅLIDO*\nDigite apenas n√∫meros (sem pontos ou v√≠rgulas).\nExemplo: 45150\n\nDigite novamente:`, { parse_mode: 'Markdown' });
        return true;
    }
 
    const kmInicialDB = await db.getKmInicialSolicitacao(sessao.codigoSolicitacao);
-   if (!kmInicialDB) {
+   if (kmInicialDB === null) {
        bot.sendMessage(sessao.chatId, '‚ùå Erro: KM inicial n√£o encontrado. Tente novamente.');
        return true;
    }
 
    if (kmFinal < kmInicialDB) {
        bot.sendMessage(sessao.chatId, 
            `‚ùå *KM FINAL INV√ÅLIDO*\n\nO KM final (${kmFinal.toLocaleString('pt-BR')}) n√£o pode ser menor que o KM inicial (${kmInicialDB.toLocaleString('pt-BR')}).\n\nDigite novamente:`, 
            { parse_mode: 'Markdown' });
        return true;
    }
 
    try {
        const solicitacao = stateManager.getRequest(sessao.codigoSolicitacao);
-       
+        
        await db.registrarKmFinal(
            sessao.codigoSolicitacao, 
            kmFinal, 
@@ -682,53 +692,38 @@
 
        await db.updateViaturaStatusDB(solicitacao.viatura.id, 'disponivel');
        
        const kmRodados = kmFinal - kmInicialDB;
-       
        const dadosCompletos = await db.getSolicitacaoCompleta(sessao.codigoSolicitacao);
-       const radioOperadorNome = dadosCompletos.radio_operador_nome || 'N/I';
 
-       const dataSolicitacao = new Date(dadosCompletos.data_solicitacao).toLocaleString('pt-BR');
-       const dataNecessidade = new Date(dadosCompletos.data_necessidade).toLocaleString('pt-BR');
-       const dataEntrega = dadosCompletos.data_entrega ? new Date(dadosCompletos.data_entrega).toLocaleString('pt-BR') : 'N/I';
+        const resumoFinal = `
+üìã *RESUMO FINAL DA SOLICITA√á√ÉO*
+‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
+üÜî **C√≥digo:** ${dadosCompletos.codigo_solicitacao}
+üë§ **Solicitante:** ${dadosCompletos.solicitante_nome}
+üöó **Viatura:** ${dadosCompletos.viatura_prefixo} - ${dadosCompletos.viatura_nome}
+üìÖ **Necessidade:** ${new Date(dadosCompletos.data_necessidade).toLocaleString('pt-BR')}
+üìä **KM Rodados:** ${kmRodados.toLocaleString('pt-BR')} (Inicial: ${kmInicialDB.toLocaleString('pt-BR')} | Final: ${kmFinal.toLocaleString('pt-BR')})
+üìù **Motivo:** ${dadosCompletos.motivo}
+‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
+‚úÖ **SOLICITA√á√ÉO FINALIZADA**`;
 
-       await bot.editMessageText(`
-üìã *RESUMO FINAL DA SOLICITA√á√ÉO*
-‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
+        bot.deleteMessage(sessao.chatId, solicitacao.messageIds.status).catch(e => console.error("Erro ao deletar msg C:", e.message));
+        bot.editMessageText(resumoFinal, {
+            chat_id: sessao.chatId,
+            message_id: solicitacao.messageIds.interactive,
+            parse_mode: 'Markdown'
+        });
 
-üÜî **C√≥digo:** ${dadosCompletos.codigo_solicitacao}
-
-üë§ **PESSOAS ENVOLVIDAS:**
-- Solicitante: ${dadosCompletos.solicitante_nome}
-- Vistoriador: ${dadosCompletos.vistoriador_nome || 'N/I'}
-- Autorizador: ${dadosCompletos.autorizador_nome || 'N/I'}
-- R√°dio-operador: ${radioOperadorNome}
-
-üöó **VIATURA:**
-- Nome: ${dadosCompletos.viatura_nome || 'N/I'}
-- Prefixo: ${dadosCompletos.viatura_prefixo || 'N/I'}
-- Placa: ${dadosCompletos.viatura_placa || 'N/I'}
-
-üìÖ **DATAS E HOR√ÅRIOS:**
-- Solicita√ß√£o: ${dataSolicitacao}
-- Necessidade: ${dataNecessidade}
-- Entrega chaves: ${dataEntrega}
-
-üìä **QUILOMETRAGEM:**
-- KM inicial: ${kmInicialDB.toLocaleString('pt-BR')}
-- KM final: ${kmFinal.toLocaleString('pt-BR')}
-- KM rodados: ${kmRodados.toLocaleString('pt-BR')}
-
-üìù **MOTIVO:**
-${dadosCompletos.motivo || 'N/I'}
-
-‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
-‚úÖ **SOLICITA√á√ÉO FINALIZADA**
-üéâ Obrigado por utilizar o sistema!
-       `, { 
-           chat_id: sessao.chatId, 
-           message_id: solicitacao.messageIds.solicitante, 
-           parse_mode: 'Markdown' 
-       });
-
        await stateManager.deleteSession(userId);
-       return true;
+        stateManager.deleteRequest(sessao.codigoSolicitacao);
    } catch (error) {
        console.error('Erro ao salvar KM final:', error);
        bot.sendMessage(sessao.chatId, '‚ùå Erro ao salvar KM final. Tente novamente.');
-       return true;
    }
+   return true;
 }
 
 module.exports = {
-   solicitarData,
-   solicitarHora,
-   solicitarMotivo,
+   buildInteractiveMessage,
+   iniciarFluxoSolicitacao,
    processarEntradaDataSolicitacao,
    processarEntradaHoraSolicitacao,
    processarEntradaMotivoSolicitacao,
-   processarSolicitacaoFinal,
-   notificarVistoriadores,
-   renotificarVistoriadores,
    processarRespostaVistoriador,
    handleSelecionarViatura,
-   notificarAutorizadores,
    processarAutorizacao,
-   notificarRadioOperadores,
-   solicitarKmInicial,
-   solicitarKmFinal,
+   processarEntregaChaves,
    processarEntradaKmInicial,
-   processarEntradaKmFinal,
-   processarEntregaChaves
+   processarEntradaKmFinal
 };

