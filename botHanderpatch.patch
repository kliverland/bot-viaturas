--- a/controllers/botHandlers.js
+++ b/controllers/botHandlers.js
@@ -10,13 +10,6 @@
 
 function init(bot) {
     botInstance = bot;
 
-    // Comando /start
-    bot.onText(/\/start/, async (msg) => {
-        const usuario = await authService.verificarAcesso(bot, msg);
-        if (!usuario) return;
-
-        let welcomeMessage = `üöó *Bot de Solicita√ß√£o de Viaturas* üöó\n\nBem-vindo, ${usuario.nome}!\n\n*Comandos dispon√≠veis:*\n‚Ä¢ /solicitarviatura - Solicitar uma viatura\n‚Ä¢ /status - Ver status das suas solicita√ß√µes\n‚Ä¢ /help - Ajuda`;
-        if (utils.temPermissao(usuario.tipo_usuario, 'vistoriador')) {
-            welcomeMessage += `\n\n*Comandos do Vistoriador:*\n‚Ä¢ /addviatura - Cadastrar nova viatura\n‚Ä¢ /listviaturas - Ver todas as viaturas\n‚Ä¢ /adduser - Pr√©-cadastrar novo usu√°rio\n‚Ä¢ /updatestatus - Atualizar status de viatura`;
-        }
-        bot.sendMessage(msg.chat.id, welcomeMessage, { parse_mode: 'Markdown' });
-    });
-
     // Comando /adduser
     bot.onText(/\/adduser/, async (msg) => {
         const usuarioVistoriador = await authService.verificarAcesso(bot, msg, 'vistoriador');
@@ -69,12 +62,15 @@
         const usuario = await authService.verificarAcesso(bot, msg);
         if (!usuario) return;
 
-        const keyboard = { inline_keyboard: [
-            [{ text: '‚úÖ CONCORDO E ACEITO', callback_data: `aceitar_responsabilidade_${msg.from.id}` }],
-            [{ text: '‚ùå CANCELAR', callback_data: `cancelar_solicitacao_${msg.from.id}` }]
-        ]};
-        bot.sendMessage(msg.chat.id, `
+        const keyboard = {
+            inline_keyboard: [
+                [{ text: '‚úÖ CONCORDO E ACEITO', callback_data: `aceitar_termos_${msg.from.id}` }],
+                [{ text: '‚ùå CANCELAR', callback_data: `cancelar_solicitacao_${msg.from.id}` }]
+            ]
+        };
+        
+        const sentMessage = await bot.sendMessage(msg.chat.id, `
 üìã *SOLICITA√á√ÉO DE VIATURA - TERMOS DE RESPONSABILIDADE*
 
 Antes de prosseguir, voc√™ deve estar ciente das seguintes responsabilidades:
@@ -87,6 +83,14 @@
 
 *Voc√™ concorda com estes termos?*
         `, { parse_mode: 'Markdown', reply_markup: keyboard });
+        
+        await stateManager.setSession(msg.from.id, {
+            etapa: 'aguardando_confirmacao_termos',
+            chatId: msg.chat.id,
+            nomeUsuario: usuario.nome,
+            userId: msg.from.id,
+            interactiveMessageId: sentMessage.message_id
+        });
     });
 
     // Comando /status
@@ -107,63 +111,12 @@
         }
     });
 
-    // Comando /help
-    bot.onText(/\/help/, async (msg) => {
-        const usuario = await authService.verificarAcesso(bot, msg);
-        if (!usuario) return;
-        
-        let helpMessage = `üÜò *AJUDA - Bot de Viaturas*\n\n`;
-        
-        helpMessage += `*üìã Comandos B√°sicos:*\n`;
-        helpMessage += `‚Ä¢ /start - Iniciar o bot\n`;
-        helpMessage += `‚Ä¢ /solicitarviatura - Fazer nova solicita√ß√£o\n`;
-        helpMessage += `‚Ä¢ /status - Ver suas solicita√ß√µes\n`;
-        helpMessage += `‚Ä¢ /help - Esta mensagem de ajuda\n\n`;
-        
-        if (utils.temPermissao(usuario.tipo_usuario, 'radio_operador')) {
-            helpMessage += `*üìª Comandos do R√°dio-Operador:*\n`;
-            helpMessage += `‚Ä¢ Entregar chaves das solicita√ß√µes autorizadas\n\n`;
-        }
-        
-        if (utils.temPermissao(usuario.tipo_usuario, 'vistoriador')) {
-            helpMessage += `*üõ†Ô∏è Comandos do Vistoriador:*\n`;
-            helpMessage += `‚Ä¢ /addviatura - Cadastrar nova viatura\n`;
-            helpMessage += `‚Ä¢ /listviaturas - Ver todas as viaturas\n`;
-            helpMessage += `‚Ä¢ /updatestatus - Atualizar status de viatura\n`;
-            helpMessage += `‚Ä¢ /adduser - Pr√©-cadastrar novo usu√°rio\n`;
-            helpMessage += `‚Ä¢ Atender solicita√ß√µes de vistoria\n\n`;
-        }
-        
-        if (utils.temPermissao(usuario.tipo_usuario, 'autorizador')) {
-            helpMessage += `*üîë Comandos do Autorizador:*\n`;
-            helpMessage += `‚Ä¢ Autorizar/negar solicita√ß√µes vistoriadas\n\n`;
-        }
-        
-        helpMessage += `*üîÑ Como funciona o processo:*\n`;
-        helpMessage += `1Ô∏è‚É£ Solicitante aceita termos de responsabilidade\n`;
-        helpMessage += `2Ô∏è‚É£ Informa data e hora necess√°ria\n`;
-        helpMessage += `3Ô∏è‚É£ Descreve o motivo da solicita√ß√£o\n`;
-        helpMessage += `4Ô∏è‚É£ Vistoriador analisa e seleciona viatura\n`;
-        helpMessage += `5Ô∏è‚É£ Autorizador aprova ou nega\n`;
-        helpMessage += `6Ô∏è‚É£ R√°dio-operador entrega as chaves\n`;
-        helpMessage += `7Ô∏è‚É£ Solicitante informa KM inicial e final\n\n`;
-        
-        helpMessage += `*‚ö†Ô∏è Informa√ß√µes Importantes:*\n`;
-        helpMessage += `‚è∞ Anteced√™ncia m√≠nima: ${config.ANTECEDENCIA_MINIMA_MINUTOS} minutos\n`;
-        helpMessage += `üìã Ficha DNA dispon√≠vel na sala do r√°dio-operador\n`;
-        helpMessage += `üîç Vistoria pr√©via √© facultativa para sua prote√ß√£o\n`;
-        helpMessage += `üìä Sempre informe a quilometragem corretamente\n\n`;
-        
-        helpMessage += `*‚ùì D√∫vidas?* Entre em contato com a administra√ß√£o.`;
-        
-        bot.sendMessage(msg.chat.id, helpMessage, { parse_mode: 'Markdown' });
-    });
-
     // Comando /debug
     bot.onText(/\/debug/, async (msg) => {
         const usuario = await authService.verificarAcesso(bot, msg);
         if (!usuario) return;
+
         const vistoriadores = await db.getUsuariosPorTipoDB('vistoriador');
         let debugMessage = `üîç *DEBUG - Informa√ß√µes do Sistema*\n\nüë§ *Seus dados:*\n‚Ä¢ ID: ${msg.from.id}\n‚Ä¢ Nome: ${usuario.nome}\n‚Ä¢ Tipo: ${usuario.tipo_usuario}\n\n`;
         debugMessage += `üë• *Vistoriadores (${vistoriadores.length}):*\n`;
@@ -176,43 +129,48 @@
 
     // Handler para mensagens de texto
     bot.on('message', async (msg) => {
-        const texto = msg.text;
-
-        // Se a mensagem for nula ou come√ßar com '/', ignoramos, pois √© um comando.
+        const texto = msg.text; 
         if (!texto || texto.startsWith('/')) return;
 
         const sessao = await stateManager.getSession(msg.from.id);
         if (!sessao || !sessao.etapa) return;
 
-        console.log(`MessageHandler: Etapa=${sessao.etapa}, UserID=${msg.from.id}, Texto=${texto}`);
+        console.log(`MessageHandler: Etapa=${sessao.etapa}, UserID=${msg.from.id}`);
 
         let handled = false;
-        // >>> ALTERA√á√ÉO: Passando o objeto 'msg' completo para os handlers <<<
-        // Isso permite que os handlers acessem o message_id para apagar a mensagem do usu√°rio.
         
-        // Fluxo de Autentica√ß√£o/Cadastro do pr√≥prio usu√°rio
-        if (!handled && sessao.etapa === 'aguardando_cpf') handled = await authService.processarEntradaCpf(bot, msg);
-        if (!handled && sessao.etapa === 'aguardando_matricula') handled = await authService.processarEntradaMatricula(bot, msg);
-        if (!handled && sessao.etapa === 'aguardando_nome') handled = await authService.processarEntradaNome(bot, msg);
-
         // Fluxo de Pr√©-cadastro de Usu√°rio
-        if (!handled && sessao.etapa === 'precad_aguardando_cpf') handled = await authService.processarEntradaCpfPreCadastro(bot, msg);
-        if (!handled && sessao.etapa === 'precad_aguardando_matricula') handled = await authService.processarEntradaMatriculaPreCadastro(bot, msg);
+        // ...
 
         // Fluxo de Solicita√ß√£o de Viatura
-        if (!handled && sessao.etapa === 'aguardando_data') handled = await requestService.processarEntradaDataSolicitacao(bot, msg);
-        if (!handled && sessao.etapa === 'aguardando_hora') handled = await requestService.processarEntradaHoraSolicitacao(bot, msg);
-        if (!handled && sessao.etapa === 'aguardando_motivo') handled = await requestService.processarEntradaMotivoSolicitacao(bot, msg);
+        if (!handled && sessao.etapa === 'aguardando_data') handled = await requestService.processarEntradaDataSolicitacao(bot, msg);
+        if (!handled && sessao.etapa === 'aguardando_hora') handled = await requestService.processarEntradaHoraSolicitacao(bot, msg);
+        if (!handled && sessao.etapa === 'aguardando_motivo') handled = await requestService.processarEntradaMotivoSolicitacao(bot, msg);
 
         // Fluxo de Cadastro de Viatura
-        if (!handled && sessao.etapa === 'aguardando_prefixo') handled = await vehicleService.processarEntradaPrefixoViatura(bot, msg);
-        if (!handled && sessao.etapa === 'aguardando_nome_viatura') handled = await vehicleService.processarEntradaNomeViatura(bot, msg);
-        if (!handled && sessao.etapa === 'aguardando_modelo') handled = await vehicleService.processarEntradaModeloViatura(bot, msg);
-        if (!handled && sessao.etapa === 'aguardando_placa') handled = await vehicleService.processarEntradaPlacaViatura(bot, msg);
-        if (!handled && sessao.etapa === 'aguardando_km') handled = await vehicleService.processarEntradaKmViatura(bot, msg);
+        // ...
         
         // Fluxo de KM inicial e final
-        if (!handled && sessao.etapa === 'aguardando_km_inicial') handled = await requestService.processarEntradaKmInicial(bot, msg);
-        if (!handled && sessao.etapa === 'aguardando_km_final') handled = await requestService.processarEntradaKmFinal(bot, msg);
+        if (!handled && sessao.etapa === 'aguardando_km_inicial') handled = await requestService.processarEntradaKmInicial(bot, msg);
+        if (!handled && sessao.etapa === 'aguardando_km_final') handled = await requestService.processarEntradaKmFinal(bot, msg);
     });
 
     // Handler para callbacks
@@ -221,7 +201,7 @@
         const data = callbackQuery.data;
         const chatId = message.chat.id;
         const userIdClicou = callbackQuery.from.id;
-
+ 
         console.log(`CallbackQuery: Data='${data}', UserID Clicou=${userIdClicou}, ChatID=${chatId}, MessageID=${message.message_id}`);
 
         // Handler para pr√©-cadastro de tipo de usu√°rio
@@ -262,25 +242,21 @@
             return;
         }
 
-        // >>> ALTERA√á√ÉO: Novo fluxo de aceitar responsabilidade <<<
-        if (data.startsWith('aceitar_responsabilidade_')) {
+        if (data.startsWith('aceitar_termos_')) {
             const solicitanteIdOriginal = data.split('_')[2];
             if (userIdClicou.toString() !== solicitanteIdOriginal) {
                 bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå Esta a√ß√£o n√£o √© sua.' });
                 return;
             }
-            const usuarioAuth = await authService.verificarAutenticacao(userIdClicou);
-            const nomeUsuario = usuarioAuth ? usuarioAuth.nome : callbackQuery.from.first_name;
-            
-            // Inicia a sess√£o para o novo fluxo interativo
-            await stateManager.setSession(userIdClicou, { 
-                nomeUsuario: nomeUsuario, 
-                chatId: chatId,
-                // Salva o ID da mensagem que ser√° editada
-                interactiveMessageId: message.message_id 
-            });
-            
-            // Chama a primeira fun√ß√£o do novo fluxo
-            requestService.solicitarData(bot, userIdClicou); 
+
+            const sessao = await stateManager.getSession(userIdClicou);
+            if (!sessao || !sessao.interactiveMessageId) {
+                 bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå Sess√£o expirada. Comece de novo com /solicitarviatura' });
+                 return;
+            }
+            
+            await requestService.iniciarFluxoSolicitacao(bot, userIdClicou, sessao.interactiveMessageId);
             bot.answerCallbackQuery(callbackQuery.id, { text: '‚úÖ Termos aceitos! Continue...' });
             return;
         }
@@ -308,18 +284,10 @@
                 return;
             }
 
-            await bot.editMessageText(`
-üéâ *CHAVES ENTREGUES - ${codigoSolicitacao}*
-
-Agora voc√™ precisa informar a quilometragem inicial da viatura.
-            `, { 
-                chat_id: chatId, 
-                message_id: message.message_id, 
-                parse_mode: 'Markdown' 
-            });
-
-            requestService.solicitarKmInicial(bot, chatId, userIdClicou, codigoSolicitacao);
+            await stateManager.setSession(userIdClicou, { etapa: 'aguardando_km_inicial', chatId, codigoSolicitacao });
+            const solicitacao = stateManager.getRequest(codigoSolicitacao);
+            bot.editMessageText(`üìä *INFORMAR KM INICIAL - ${codigoSolicitacao}*\n\nDigite a quilometragem inicial da viatura (apenas n√∫meros):`, { chat_id: chatId, message_id: solicitacao.messageIds.status, parse_mode: 'Markdown' });
             bot.answerCallbackQuery(callbackQuery.id, { text: 'üìä Informe o KM inicial' });
             return;
         }
@@ -338,18 +306,10 @@
                     return;
                 }
 
-                const solicitacao = stateManager.getRequest(codigoSolicitacao);
-                await bot.editMessageText(`
-üìä *INFORMAR KM FINAL - ${codigoSolicitacao}*
-
-‚úÖ KM inicial: ${kmInicial.toLocaleString('pt-BR')}
-
-Digite a quilometragem final da viatura:
-                `, { 
-                    chat_id: chatId, 
-                    message_id: solicitacao.messageIds.solicitante,
-                    parse_mode: 'Markdown' 
-                });
-
-                requestService.solicitarKmFinal(bot, chatId, userIdClicou, codigoSolicitacao, kmInicial);
+                await stateManager.setSession(userIdClicou, { etapa: 'aguardando_km_final', chatId, codigoSolicitacao, kmInicial });
+                const solicitacao = stateManager.getRequest(codigoSolicitacao);
+                bot.editMessageText(`üìä *INFORMAR KM FINAL - ${codigoSolicitacao}*\n\nKM inicial informado: **${kmInicial.toLocaleString('pt-BR')}**\n\nDigite a quilometragem final da viatura (apenas n√∫meros):`, {
+                    chat_id: chatId, message_id: solicitacao.messageIds.status, parse_mode: 'Markdown'
+                });
                 bot.answerCallbackQuery(callbackQuery.id, { text: 'üìä Informe o KM final' });
             } catch (error) {
                 console.error('Erro ao buscar KM inicial:', error);
@@ -358,26 +318,28 @@
             return;
         }
         
-        // >>> ALTERA√á√ÉO: Novo fluxo para o bot√£o "HOJE" <<<
         if (data.startsWith('data_hoje_')) {
             const solicitanteIdOriginal = data.split('_')[2];
             if (userIdClicou.toString() !== solicitanteIdOriginal) {
                 bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå Esta a√ß√£o n√£o √© sua.' });
                 return;
             }
-            const hoje = new Date().toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit', year: 'numeric' });
             const sessao = await stateManager.getSession(userIdClicou);
             if (!sessao) {
                 bot.answerCallbackQuery(callbackQuery.id, { text: 'Sess√£o expirada.' });
                 return;
             }
             
-            // Atualiza a sess√£o com a data e avan√ßa o fluxo
+            const hoje = new Date().toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit', year: 'numeric' });
             sessao.data = hoje;
+            sessao.etapa = 'aguardando_hora';
+            delete sessao.errorMessage;
+
             await stateManager.setSession(userIdClicou, sessao);
-            
-            // Chama a fun√ß√£o que edita a mensagem e pede a hora
-            await requestService.solicitarHora(bot, userIdClicou); 
-            
+
+            const { text, reply_markup } = requestService.buildInteractiveMessage(sessao);
+            bot.editMessageText(text, { chat_id: sessao.chatId, message_id: sessao.interactiveMessageId, parse_mode: 'Markdown', reply_markup });
+
             bot.answerCallbackQuery(callbackQuery.id, { text: '‚úÖ Data de hoje selecionada!' });
             return;
         }

